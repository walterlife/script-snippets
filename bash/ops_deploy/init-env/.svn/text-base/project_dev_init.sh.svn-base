#!/usr/bin/env bash
########################################################################
#    File Name: project_dev_init.sh
# 
#       Author: Shootao Shanghai,Inc.
#         Mail: aceway@shootao.com
# Created Time: 2015年02月10日 星期二 10时34分44秒
#  Description: 初始化本地系统环境为 项目开发环境的机器
# 
#               注意：该脚本需要独立可执行，不要依赖外部脚本，环境变量的
#                     因为本文件将会被分发到远程机器，远程部署环境 
########################################################################
set -u
set -e
set -o errexit
#
#定义控制输出终端颜色的代码
#

FG_RED="\033[1;31m"
FG_YELLOW="\033[1;33m"
FG_GREEN="\033[1;32m"
FG_BLUE="\033[0;34m"
FG_GRAY="\033[1;37m"
FG_LIGHT_RED="\033[0;31m"
FG_LIGHT_GREEN="\033[0;32m"
FG_LIGHT_BLUE="\033[0;34m"
FG_LIGHT_YELLOW="\033[0;33m"
FG_LIGHT_GRAY="\033[0;37m"
END="\033[0;00m"

#
#功能说明:
#   可以在脚本内已sudo 权限调用当前脚本内定义的 函数
#
#参数说明:
#   $1:被调用的函数名
#   $2:当前账户sudo 需要的密码
#   剩余其它参数为 被调用函数的参数
#
#Usage:
#       sudo_func "funcname" params
#
#
function sudo_func ()
{
    local _funcname_="$1"
    shift
    local supass="$1"
    shift
    local params=( "$@" )               ## array containing all params passed here
    #echo "func" $_funcname_
    #echo "supass" $supass
    #echo "params" $params
    local tmpfile="/dev/shm/.$RANDOM"    ## temporary file
    local filecontent                   ## content of the temporary file
    local regex                         ## regular expression
    local func                          ## function source

    # Shift the first param (which is the name of the function)
    # params=( "${params[@]}" )     ## repack array

    content="#!/bin/bash\n\n"

    # Write the params array
    content="${content}params=(\n"

    regex="\s+"
    for param in "${params[@]}"
    do
        if [[ "$param" =~ $regex ]]
            then
                content="${content}\t\"${param}\"\n"
            else
                content="${content}\t${param}\n"
        fi
    done

    content="$content)\n"
    echo -e "$content" > "$tmpfile"

    # Append the function source
    echo "#$( type "$_funcname_" )" >> "$tmpfile"

    echo -e "\n$_funcname_ \"\${params[@]}\"\n" >> "$tmpfile"

    #echo $tmpfile
    echo ${supass} |sudo -S bash "$tmpfile"
    rm -f "$tmpfile"
}


#
#功能说明：
#   自动添加一个开发者帐号
#   包括添加账户，设置密码，设置初始化目录， .bashrc .vimrc
#   TODO: 增加自动输入密码的功能
#
#   对于远程服务器的安装，可以通过将本脚本上传上去后执行安装
#
#  第一个参数为执行账户的密码---sudo 时用到
#  剩余参数为 安装包列表
function add_dev_user()
{
    if [ $# -gt 3 ];then
        duser=$1
        shift
        dpass=$1
        shift
        dhome=$1
        shift
        ddirs=$@
        the_user="" 
        while read LINE
        do
            has_user=`echo $LINE |cut -d ':' -f 1`
            if [ ${has_user} = ${duser} ];then
                echo -e "\n${FG_YELLOW}用户${FG_GREEN}${has_user}${FG_YELLOW}已经存在:${END} ${LINE}\n"
                the_user=${has_user}
                break
            fi
        done < /etc/passwd

        if [ -z ${the_user} ];then
            useradd -m -d "${dhome}/${duser}" -s /bin/bash ${duser}
            echo "${duser}:${dpass}" | chpasswd

        fi
        dir_array=(${ddirs/ / })  
        for dr in ${dir_array[@]}
        do
            if [ ! -z ${dr} ];then
                mkdir -p ${dhome}/${duser}/${dr}
                chown -R ${duser}:${duser} ${dhome}/${duser}/${dr} 
                chmod 700 -R ${dhome}/${duser}
            fi
        done
    else
        :
    fi
}

#
#功能说明：
#   在本地批量自动安装文件
#   函数内部检测帐号是否为root, 当是以root账户时直接执行安装，否则执行 sudo 安装-需要交互输入密码
#   TODO: 增加自动输入密码的功能
#
#   对于远程服务器的安装，可以通过将本脚本上传上去后执行安装
#
#  第一个参数为执行账户的密码---sudo 时用到
#  剩余参数为 安装包列表
function install_package_list()
{
    if [ $# -gt 0 ];then
        if [ ${USER} = "root" ];then
            shift
            pkg_list=$@
            apt-get install --yes ${pkg_list}
        else
            pass=$1
            shift
            pkg_list=$@
            echo "${pass}" |sudo -S apt-get install --yes ${pkg_list}
        fi
    else
        echo -e "${FG_RED}参数不对,${END}Usage: \n\t${FG_YELLOW} ${FUNCNAME} package name list ${FG_GREEN} ${END}"
        echo -e "\t ${FUNCNAME} $@"
    fi
}

#
#功能说明：
#   根据参数 在本地安装一批软件
#   如果只有两个参数，且第二个参数为 文件名， 则安装文件里的列表， 第一个参数需要为 执行账户的密码---sudo 时用
#
#   如果第二个参数不是文件，则当作包列表进行安装， 第一个参数需要为 执行账户的密码---sudo 时用
#
#
function install_project_env()
{
    if [ $# -eq 2 ] && [ -f $2 ];then
        while read pkg
        do   
            if [ ! -z "${pkg}" ];then
                pkgs="${pkgs} ${pkg}"
            fi
        done < $2
        if [ ! -z "${pkgs}" ];then
            install_package_list $1 ${pkgs}
        else
            echo -e "${FG_RED}Package list file is empty:${FG_YELLOW}$1!${END}"
        fi
    elif [ $# -gt 0 ] && [ ! -z ${2:0} ];then
        pkgs=$@
        if [ ${pkgs:0:1} = "." ] || [ ${pkgs:0:1} = "/" ];then
            echo -e "${FG_RED}Its not a file or package name:${FG_YELLOW}${pkgs}!${END}"
        else
            install_package_list $@
        fi
    else
        echo -e "${FG_RED}参数不对,${END}Usage: \n\t${FG_YELLOW} ${FUNCNAME} package name list ${FG_GREEN} ${END}"
        echo -e "\n\t${FG_YELLOW} ${FUNCNAME} package_list_file ${FG_GREEN} ${END}"
        echo -e "\t ${FUNCNAME} $@"
    fi
}


pass=$1

#
#创建当前用户的工作环境
#
echo -e "\n\n${FG_GREEN}为管理员${USER}创建常用工作目录\n${END}"
mkdir -p ${HOME}/bin ${HOME}/doc ${HOME}/software ${HOME}/tmp ${HOME}/workspace/svn ${HOME}/bak
echo "${pass}" |sudo -S rm -rf ${HOME}/bak/init-dev
mv -uf ${HOME}/init-dev ${HOME}/bak/

echo -e "\n\n${FG_GREEN}为管理员${USER}创建的工作环境.bashrc, .vimrc\n${END}"
cp -a ${HOME}/bak/init-dev/bashrc ${HOME}/.bashrc
cp -a ${HOME}/bak/init-dev/vimrc ${HOME}/.vimrc


#
# 创建开发者帐号的工作环境
#
home_base="/opt"                                ##########################
user_list="harvan walter loris aceway"          ##########################
echo -e "\n\n${FG_GREEN}创建开发者帐号${END}: ${user_list}\n"
user_array=(${user_list/ / })  
for duser in ${user_array[@]}
do
    if [ ! -z ${duser} ];then
        dpass="${duser}#sh00tao"                ##########################
        sudo_func add_dev_user ${pass} ${duser} ${dpass} ${home_base} workspace bin bak tmp software
        echo "${pass}" |sudo -S cp -a ${HOME}/bak/init-dev/bashrc ${home_base}/${duser}/.bashrc
        echo "${pass}" |sudo -S cp -a ${HOME}/bak/init-dev/vimrc ${home_base}/${duser}/.vimrc

        echo "${pass}" |sudo -S chown ${duser}:${duser} ${home_base}/${duser}/.bashrc
        echo "${pass}" |sudo -S chown ${duser}:${duser} ${home_base}/${duser}/.vimrc
    fi
done

#根据不同的开发依赖需要，在下面添加安装包
pkg_list="./pkg_list.txt"                       #############################
#
#由于 基础框架中有对CXX-11不支持的代码(已知日志宏里的字符串连接), 所以只能用 gcc-4.6, g++-4.6, 不能用 debian7默认的 4.7 
#
#############################
pkg_list="gcc-4.6 g++-4.6 make cmake gdb vim ctags subversion git tcpdump colordiff libxml2-dev libssl-dev libglib2.0-dev libcurl4-gnutls-dev libgd2-xpm-dev libxml2 libssl1.0.0 libglib2.0-0 libcurl3 libgd2-xpm uuid uuid-dev libreadline-dev"
echo -e "\n\n${FG_GREEN}安装开发需要的系统包:\n${pkg_list}${END}"
install_project_env ${pass} ${pkg_list}
echo "${pass}" |sudo -S ln -fs /usr/bin/gcc-4.6 /usr/bin/gcc
echo "${pass}" |sudo -S ln -fs /usr/bin/g++-4.6 /usr/bin/g++


echo -e "\n\n${FG_GREEN}安装开发游戏需要的淘米后台框架${END}"
cmn_dir="${HOME}/bak/init-dev/common-source/"

cd "${cmn_dir}/libtaomee"
echo -e "\n编译安装${FG_YELLOW} libtaomee${END}:"
echo "${pass}" |sudo -S ./INSTALL
echo -e "${FG_GREEN}编译安装 libtaomee 结束${END}\n\n"

cd "${cmn_dir}/libtaomee++"
echo -e "\n\n编译安装:${FG_YELLOW} libtaomee++${END}"
echo "${pass}" |sudo -S ./INSTALL
echo -e "${FG_GREEN}编译安装 libtaomee++ 结束${END}\n\n"

cd "${cmn_dir}/serverbench_v2/src"
echo -e "\n\n编译安装:${FG_YELLOW} serverbench_v2${END}"
echo "${pass}" |sudo -S make install
echo -e "${FG_GREEN}编译安装 serverbench_v2 结束${END}\n\n"

cd "${cmn_dir}/asynserv"
echo -e "\n\n编译安装:${FG_YELLOW} asynserv${END}"
echo "${pass}" |sudo -S ./INSTALL
echo -e "${FG_GREEN}编译安装 asynserv 结束${END}\n\n"

cd ${HOME}
echo "${pass}" |sudo -S rm -rf ${HOME}/bak/init-dev
